name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: jakerobb/modbus-eth-controller

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install swag
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Generate Swagger docs
        run: |
          cd src
          go run github.com/swaggo/swag/cmd/swag init -d cmd,pkg

      - name: Commit and push changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: auto-update swagger docs"
            git push
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull existing image for cache
        run: docker pull ${IMAGE_NAME}:latest || true

      - name: Get current date
        id: date
        run: echo "date=$(date -u +%Y%m%d)" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.date.outputs.date }}
            ${{ env.IMAGE_NAME }}:latest

      - name: Report remote image sizes by platform
        run: |
          curl -sSfL https://github.com/google/go-containerregistry/releases/latest/download/go-containerregistry_Linux_x86_64.tar.gz | tar xz
          ./crane manifest ${{ env.IMAGE_NAME }}:${{ steps.date.outputs.date }} > manifest.json
          
          echo "### Remote image sizes by platform" >> $GITHUB_STEP_SUMMARY
          for digest in $(jq -r '.manifests[].digest' manifest.json); do
            arch=$(jq -r --arg d "$digest" '.manifests[] | select(.digest == $d) | .platform.architecture // empty' manifest.json)
            os=$(jq -r --arg d "$digest" '.manifests[] | select(.digest == $d) | .platform.os // empty' manifest.json)
          
            # Skip manifests with no known platform (e.g., manifest lists)
            if [ -z "$arch" ] || [ -z "$os" ]; then
              continue
            fi
          
            ./crane manifest ${{ env.IMAGE_NAME }}@$digest > arch-manifest.json
            total=$(jq '[.layers[].size] | add' arch-manifest.json)
            human=$(numfmt --to=iec --suffix=B "$total")
            echo "- $arch: \`$human\`" >> $GITHUB_STEP_SUMMARY
          done
